name: Terraform

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./infra

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: terraform fmt
        id: fmt
        run: terraform fmt -check -recursive

      - name: terraform init
        id: init
        run: terraform init -input=false -no-color

      - name: terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: terraform plan
        id: plan
        run: terraform plan -input=false -no-color
        continue-on-error: true

      - name: Update PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Prepare format of the comment
            const output = `
              #### Terraform Plan \`${{ steps.plan.outcome }}\`
              <details>
                <summary>Expand</summary>
                <pre>${{ steps.plan.outputs.stdout }}</pre>
              </details>
            `;

            // If there exists an existing comment, update it, otherwise create a new one
            const { data: comments } = await github.rest.issues.listComments({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number });
            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('Terraform Plan'))
            if (botComment) {
              github.rest.issues.updateComment({ comment_id: botComment.id, owner: context.repo.owner, repo: context.repo.repo, body: output })
            } else {
              github.rest.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: output })
            }

      - name: Terraform Apply
        if: github.ref != 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -no-color
